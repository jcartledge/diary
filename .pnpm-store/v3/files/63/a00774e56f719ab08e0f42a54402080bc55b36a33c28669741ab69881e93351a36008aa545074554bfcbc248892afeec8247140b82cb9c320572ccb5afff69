"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("@testing-library/react");
var react_2 = require("react");
var __1 = require("..");
var fixtures_1 = require("./fixtures");
var UserContext = (0, react_2.createContext)(null);
var UserProfile = function () {
    var user = (0, react_2.useContext)(UserContext);
    if (!user) {
        return (0, jsx_runtime_1.jsx)("span", { children: "Not logged in" });
    }
    return (0, jsx_runtime_1.jsxs)("span", { children: ["User: ", user.name] });
};
describe('createContextHelper', function () {
    it('can apply the context with the value at creation time', function () {
        var withUser = (0, __1.createContextHelper)(UserContext, { name: 'Cam Jackson' });
        var rendered = (0, react_1.render)((0, jsx_runtime_1.jsx)(UserProfile, {}), { wrapper: (0, __1.wrap)(withUser()) });
        expect(rendered.container.innerHTML).toEqual((0, fixtures_1.condense)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        <span>User: Cam Jackson</span>\n      "], ["\n        <span>User: Cam Jackson</span>\n      "]))));
    });
    it('can apply the context with the value at wrapping time', function () {
        var withUser = (0, __1.createContextHelper)(UserContext);
        var rendered = (0, react_1.render)((0, jsx_runtime_1.jsx)(UserProfile, {}), {
            wrapper: (0, __1.wrap)(withUser({ name: 'Cam Jackson' })),
        });
        expect(rendered.container.innerHTML).toEqual((0, fixtures_1.condense)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        <span>User: Cam Jackson</span>\n      "], ["\n        <span>User: Cam Jackson</span>\n      "]))));
    });
    it('should give a type error', function () {
        var withUser = (0, __1.createContextHelper)(UserContext);
        var rendered = (0, react_1.render)((0, jsx_runtime_1.jsx)(UserProfile, {}), {
            // @ts-expect-error
            wrapper: (0, __1.wrap)(withUser()),
        });
        expect(rendered.container.innerHTML).toEqual((0, fixtures_1.condense)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n        <span>Not logged in</span>\n      "], ["\n        <span>Not logged in</span>\n      "]))));
    });
});
var templateObject_1, templateObject_2, templateObject_3;
