name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    env:
      TERM: xterm-256color
      BATECT_CACHE_TYPE: directory
      BATECT_ENABLE_TELEMETRY: true
    steps:
      - uses: actions/checkout@v4

      - name: Cache Batect
        uses: actions/cache@v3
        with:
          path: ~/.batect/cache
          key: batect-${{ hashFiles('batect') }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .batect/caches
          key: batect-caches-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Audit dependencies
        run: ./batect check-deps

      - name: Download dependencies
        run: ./batect setup

  build-client:
    name: build-client
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      TERM: xterm-256color
      BATECT_CACHE_TYPE: directory
      BATECT_ENABLE_TELEMETRY: true
    steps:
      - uses: actions/checkout@v4

      - name: Cache Batect
        uses: actions/cache@v3
        with:
          path: .batect/caches
          key: batect-${{ hashFiles('batect') }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .batect/caches
          key: batect-caches-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Build/test/package
        run: ./batect client-ci

      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "diary-client"

  build-server:
    name: build-server
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      TERM: xterm-256color
      BATECT_CACHE_TYPE: directory
      BATECT_ENABLE_TELEMETRY: true
    steps:
      - uses: actions/checkout@v4

      - name: Cache Batect
        uses: actions/cache@v3
        with:
          path: ~/.batect/cache
          key: batect-${{ hashFiles('batect') }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .batect/caches
          key: batect-caches-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Lint code
        run: ./batect server-lint

      - name: Unit tests
        run: ./batect server-coverage

      - name: Build docker image
        run: ./batect server-package

      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "diary-server"

  e2e:
    name: e2e
    needs: [build-client, build-server]
    runs-on: ubuntu-latest
    env:
      TERM: xterm-256color
      BATECT_CACHE_TYPE: directory
      BATECT_ENABLE_TELEMETRY: true

    steps:
      - uses: actions/checkout@v4

      - name: Download client image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "diary-client"

      - name: Download server image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "diary-server"

      - name: Cache Batect
        uses: actions/cache@v3
        with:
          path: ~/.batect/cache
          key: batect-${{ hashFiles('batect') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: .batect/caches
          key: batect-caches-${{ hashFiles('pnpm-lock.yaml') }}

      - name: certificate
        run: ./batect client-cert

      - name: e2e
        env:
          E2E_USER: ${{ secrets.E2E_USER }}
          E2E_PASS: ${{ secrets.E2E_PASS }}
        run: ./batect e2e

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: screenshots
          path: workspaces/e2e/test-results

  publish-client:
    name: publish-client
    needs: [e2e]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download client image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "diary-client"

      - name: Tag client image
        run: docker tag diary-client ghcr.io/jcartledge/diary-client:latest

      - name: Push client image
        run: docker push ghcr.io/jcartledge/diary-client:latest

  publish-server:
    name: publish-server
    needs: [e2e]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download server image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "diary-server"

      - name: Tag server image
        run: docker tag diary-server ghcr.io/jcartledge/diary-server:latest

      - name: Push server image
        run: docker push ghcr.io/jcartledge/diary-server:latest
